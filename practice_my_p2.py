string1 = "This is a string."
string2 = " This is another string."
print(string1 + string2)
#len() - определяет длину строки;
#title() - преобразует первый символ каждого слова в строке к верхнему регистру;
#lower() - символы строки преобразуются к нижнему регистру;
#upper() - символы строки преобразуются к верхнему регистру;
#rstrip() – удаляются пробелы в конце строки;
#lstrip() – удаляются пробелы в начале строки;
#strip() - удаляются пробелы с обоих концов;
#strip('0') - удаляются с обоих концов указанные символы в параметре функции.
print(len(string1))
print(string2.title())
print(string1.lower())
print(string2.upper())
print(string1.rstrip())
print(string2.lstrip())
print(string1.strip())
print(string1.strip('T'))
d = "qwerty"
ch = d[2] # извлекается символ 'e'
print("qwerty", ch)
#Примените срез (slicing) для извлечения за одну операцию целого сегмента 
#(среза) строки (в качестве результата возвращается новый объект), 
#например:
chm = d[1:3]
print("2qwerty", chm)
#Проверьте другие варианты извлечения, d[1:], d[:3], d[:], d[1:5:2]
chm_1 = d[1:]
print("3qwerty", chm_1)
chm_2 = d[:3]
print("4qwerty", chm_2)
chm_3 = d[:]
print("5qwerty", chm_3)
chm_4 = d[1:5:2]
print("6qwerty", chm_4)
#Объявите две переменные целого типа и проверьте операции 
#целочисленного деления(\), взятие остатка (%) и возведение в степень (**).
var_int_1 = 6
var_int_2 = 11
print("integer division", (var_int_2 // var_int_1))
print("taking the remainder", (var_int_2 % var_int_1))
print("exponentiation", (var_int_2 ** 2))
#Реализуйте конкатенацию – число преобразуйте к строке:
param = "string" + str(15)
#Составьте программу, запрашивающую у пользователя два числа и 
#реализующую их сложение. Для этого преобразуйте строку к требуемому 
#числовому типу:
n1 = input("Enter the first number: ")
n2 = input("Enter the second number: ")
n3 = float(n1) + float(n2)
print("{:8.2f}".format(n3))
print(n1 + " plus " + n2 + " = ", n3)
#Форматирование строк 
#Форматный вывод: все данные, которые нужно вывести, сначала преобразуют в 
#символьную строку с помощью функции format().
#1. Изучите справку о функции format() – раздел 7.1.2. The String format() 
#Method.
#2. Введите в окно редактора следующий код и проанализируйте результат:
a = 1/3
print("{:7.3f}".format(a))
#3. Проверьте форматный вывод для нескольких значений сразу:
a = 2/3
b = 2/9
print("{:7.3f} {:7.3f}".format(a, b))
print("{:10.3e} {:10.3e}".format(a, b))

#1. Создайте список произвольных чисел, например:
list1 = [82,8,23,97,92,44,17,39,11,12]

#2. Примените команду dir для просмотра методов работы со списками 
print(dir(list))
#3. Вызовите справку (с помощью команды help) для методов insert, append, 
#sort, remove, reverse.
help(list.insert)
help(list.append)
help(list.sort)
help(list.remove)
help(list.reverse)
#4. Измените значения элементов списка (по вашему усмотрению) с помощью 
#операции индексирования.
print(list1)
list1[4] = 7
print(list1)
#5. Добавьте новый элемент в конец списка.
list1.append(21)
print(list1)
#6. Добавьте новый элемент в произвольную (на ваше усмотрение) позицию 
#списка.
list1.insert(2,22)
print(list1)
#7. Удалите элемент из списка по известной позиции.
list1.pop(2)
print(list1)
#8. Удалите последний элемент из списка
list1.pop()
print(list1)
#Сортировка элементов списка
list1.sort()
print(list1)

#Сортировка элементов списка 
#Метод sort() осуществляет изменение порядка элементов в списке и вернуться к 
#исходному порядку уже не удастся.
#1. Выполните сортировку списка list1 с помощью метода sort() по убыванию 
#(параметр reverse = True).
list1.sort(reverse = True)
print(list1)
#2. Проверьте, что исходный список теперь имеет указанный порядок.
#Чтобы сохранить исходный порядок элементов списка, но представить их в 
#отсортированном порядке можно воспользоваться функцией sorted().
print(sorted(list1))
#3. Создайте новый список произвольных элементов, например
list2 = [3,5,6,2,33,6,11]
#4. Объявите новый объект (будет список) и ему присвойте результат работы 
#функции sorted():
lis = sorted(list2)
#5. Проверьте содержимое исходного и отсортированного списков.
print(lis)

#Кортежи
#Объект-кортеж (tuple) – последовательность данных, которые невозможно 
#изменить. Поддерживает включение объектов различных типов, вложение и 
#операции, типичные для последовательностей.
#1. Примените команду dir для просмотра методов работы со списками 
print(dir(tuple))
#2. Вызовите справку (с помощью команды help) для методов index, count.
help(tuple.index)
help(tuple.count)
#3. Создайте кортеж произвольных чисел, например:
seq = (2,8,23,97,92,44,17,39,11,12)
#4. Определите, что возвращают команды:
print(seq.count(8))
print(seq.index(44))
#5. Преобразуйте кортеж к типу «список»:
listseq = list(seq)
#6. С помощью команды type(listseq) проверьте правильность преобразования.
print(type(listseq))
#7. Проверьте работу основных методов, применяемых к списку для 
#преобразованного «кортежа».
print(seq[1])
print(seq[-2])#Обращение к элементу кортежа
print(seq[0] == seq[-10])
#Сортировка
sorted_seq = tuple(sorted(seq))
print('Sort tuple:',sorted_seq)
#Добавить или удалить элемент содержащийся в tuple нельзя. 
#Однако сам кортеж удалить возможно.
#Удаление
del sorted_seq
#print(sorted_seq)#NameError: name 'some_useless_stuff' is not defined
#Срез tuple[start:fin:step]
print(seq[0:3])
print(seq[0:len(seq)])#Получение длины
#Вывод элементов с шагом 2
print(seq[-10::2])
#Конкатенация
sorted_seq = tuple(sorted(seq))
print(seq + sorted_seq)
# Преобразование кортежа в строку при помощи метода join():
seq_string = ''.join(str(seq))
print(seq_string)
# Преобразование в список - передаем кортеж, как аргумент функции list():
seq_list = list(seq)
print(seq_list)
#Именованные кортежи
from collections import namedtuple

citizen = namedtuple("Citizen", "name age status")
Yurii = citizen(name='Yurii', age=51, status='student')
print(Yurii.name)

#Словари – ассоциативные массивы, в которых доступ к данным осуществляется 
#по ключу. Любой объект Python, может стать значением в словаре.
#1. Создайте словарь, состоящий из трех элементов (с ключами «food» 
#(продукт питания), «quantity» (количество) и «color» (цвет)):

D = {'food': 'Apple', 'quantity': 4, 'color': 'Red'}

#2. Проверьте возможность доступа к элементам этого словаря по ключам и 
#изменения значений, связанные с ключами (в квадратных скобках 
#указывается ключ), например:
D['food']
D['quantity'] += 10
print(D)
#3. Создайте пустой словарь:
dp = {}
#4. Напишите инструкцию, заполняющую словарь значениями, вводимыми с 
#клавиатуры в создаваемые ‘на лету’ ключи ‘name’ и ‘age’.
name = input("Enter the name: ")
age = input("Enter the age: ")
dic_name = {'name': name, 'age': age}

#1. Создайте словарь, реализующий требуемую структуру:
rec = {'name': {'firstname': 'Bob', 'lastname': 'Smith'}, 
 'job': ['dev', 'mgr'], 
 'age': 25}
#2. Реализуйте вывод значения полного имени, отдельно имени firstname, 
#список должностей.
print("Full name:", rec['name']['firstname'], rec['name']['lastname'])
print("Firstname", rec['name']['firstname'], )
print(rec['job']) 
#3. Напишите инструкцию, расширяющую список должностей, например:
rec['job'].append('janitor')
#4. Выведите полную информацию о персоне.
print(rec)